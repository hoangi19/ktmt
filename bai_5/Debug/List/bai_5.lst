
AVRASM ver. 2.1.30  E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm Fri Dec 04 02:09:22 2020

E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1090): warning: Register r5 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1091): warning: Register r6 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1092): warning: Register r7 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1094): warning: Register r9 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1095): warning: Register r4 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1096): warning: Register r11 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128L
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128L
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF _adc_val=R6
                 	.DEF _adc_val_msb=R7
                 	.DEF _buf=R8
                 	.DEF _buf_msb=R9
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1144): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0,0x0,0x0
                 
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1149): warning: .cseg .db misalignment - padding zero byte
000049 0001      	.DB  0x1
                 _0x2020000:
00004a 4e2d
00004b 4e41
00004c 4900
00004d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Code\learning\ktmt\thuchanh\bai_5\Debug\List\bai_5.asm(1152): warning: .cseg .db misalignment - padding zero byte
00004e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004f 0003      	.DW  0x03
000050 0005      	.DW  0x05
000051 008c      	.DW  __REG_VARS*2
                 
000052 0002      	.DW  0x02
000053 0500      	.DW  __base_y_G100
000054 0090      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 0504      	.DW  __seed_G101
000057 0092      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
00005f 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e0a0      	LDI  R26,LOW(__SRAM_START)
00006a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000080 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 0096 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai_5.c
                 ; *
                 ; * Created: 12/3/2020 6:50:38 PM
                 ; * Author: hoangi19
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define CT1 PINB.2
                 ;
                 ;char i = 0;
                 ;unsigned int adc_val = 0;
                 ;char *buf;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001B {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001C ADMUX=adc_input | ADC_VREF_TYPE;
000089 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008a 81e8      	LD   R30,Y
00008b b9e7      	OUT  0x7,R30
                 ; 0000 001D // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001E delay_us(10);
                +
00008c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008d 958a     +DEC R24
00008e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001F // Start the AD conversion
                 ; 0000 0020 ADCSRA|=(1<<ADSC);
00008f 9a36      	SBI  0x6,6
                 ; 0000 0021 // Wait for the AD conversion to complete
                 ; 0000 0022 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000090 9b34      	SBIS 0x6,4
000091 cffe      	RJMP _0x3
                 ; 0000 0023 ADCSRA|=(1<<ADIF);
000092 9a34      	SBI  0x6,4
                 ; 0000 0024 return ADCW;
000093 b1e4      	IN   R30,0x4
000094 b1f5      	IN   R31,0x4+1
000095 c0d3      	RJMP _0x20A0001
                 ; 0000 0025 }
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0029 {
                 _main:
                 ; .FSTART _main
                 ; 0000 002A 
                 ; 0000 002B // Analog Comparator initialization
                 ; 0000 002C // Analog Comparator: Off
                 ; 0000 002D // The Analog Comparator's positive input is
                 ; 0000 002E // connected to the AIN0 pin
                 ; 0000 002F // The Analog Comparator's negative input is
                 ; 0000 0030 // connected to the AIN1 pin
                 ; 0000 0031 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000096 e8e0      	LDI  R30,LOW(128)
000097 b9e8      	OUT  0x8,R30
                 ; 0000 0032 
                 ; 0000 0033 // ADC initialization
                 ; 0000 0034 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0035 // ADC Voltage Reference: AREF pin
                 ; 0000 0036 ADMUX=ADC_VREF_TYPE;
000098 e0e0      	LDI  R30,LOW(0)
000099 b9e7      	OUT  0x7,R30
                 ; 0000 0037 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00009a e8e3      	LDI  R30,LOW(131)
00009b b9e6      	OUT  0x6,R30
                 ; 0000 0038 SFIOR=(0<<ACME);
00009c e0e0      	LDI  R30,LOW(0)
00009d bde0      	OUT  0x20,R30
                 ; 0000 0039 
                 ; 0000 003A DDRB = 0x00;
00009e bbe7      	OUT  0x17,R30
                 ; 0000 003B PORTB = 0xFF;
00009f efef      	LDI  R30,LOW(255)
0000a0 bbe8      	OUT  0x18,R30
                 ; 0000 003C 
                 ; 0000 003D lcd_init(16);
0000a1 e1a0      	LDI  R26,LOW(16)
0000a2 d099      	RCALL _lcd_init
                 ; 0000 003E lcd_clear();
0000a3 d066      	RCALL _lcd_clear
                 ; 0000 003F 
                 ; 0000 0040 DDRD.7 = 1;
0000a4 9a8f      	SBI  0x11,7
                 ; 0000 0041 PORTD.7 = 1;
0000a5 9a97      	SBI  0x12,7
                 ; 0000 0042 
                 ; 0000 0043 while (1)
                 _0xA:
                 ; 0000 0044     {
                 ; 0000 0045     // Please write your application code here
                 ; 0000 0046         if (CT1 == 1)
0000a6 9bb2      	SBIS 0x16,2
0000a7 c022      	RJMP _0xD
                 ; 0000 0047         {
                 ; 0000 0048             for (i = 0; i <= 3; i++)
0000a8 2455      	CLR  R5
                 _0xF:
0000a9 e0e3      	LDI  R30,LOW(3)
0000aa 15e5      	CP   R30,R5
0000ab f0f0      	BRLO _0x10
                 ; 0000 0049             {
                 ; 0000 004A                 adc_val = read_adc(i);
0000ac 2da5      	MOV  R26,R5
0000ad dfdb      	RCALL _read_adc
0000ae 013f      	MOVW R6,R30
                 ; 0000 004B                 lcd_gotoxy(5*i%15, 5*i/15);
0000af 2de5      	MOV  R30,R5
0000b0 e0a5      	LDI  R26,LOW(5)
0000b1 9fea      	MUL  R30,R26
0000b2 01f0      	MOVW R30,R0
0000b3 01bf      	MOVW R22,R30
0000b4 01df      	MOVW R26,R30
0000b5 e0ef      	LDI  R30,LOW(15)
0000b6 e0f0      	LDI  R31,HIGH(15)
0000b7 940e 01cd 	CALL __MODW21
0000b9 93ea      	ST   -Y,R30
0000ba 01db      	MOVW R26,R22
0000bb e0ef      	LDI  R30,LOW(15)
0000bc e0f0      	LDI  R31,HIGH(15)
0000bd 940e 01c8 	CALL __DIVW21
0000bf 2fae      	MOV  R26,R30
0000c0 d03c      	RCALL _lcd_gotoxy
                 ; 0000 004C                 itoa(adc_val, buf);
0000c1 927a      	ST   -Y,R7
0000c2 926a      	ST   -Y,R6
0000c3 01d4      	MOVW R26,R8
0000c4 940e 016b 	CALL _itoa
                 ; 0000 004D                 lcd_puts(buf);
0000c6 01d4      	MOVW R26,R8
0000c7 d063      	RCALL _lcd_puts
                 ; 0000 004E             }
0000c8 9453      	INC  R5
0000c9 cfdf      	RJMP _0xF
                 _0x10:
                 ; 0000 004F         }
                 ; 0000 0050     }
                 _0xD:
0000ca cfdb      	RJMP _0xA
                 ; 0000 0051 }
                 _0x11:
0000cb cfff      	RJMP _0x11
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000cc 93aa      	ST   -Y,R26
0000cd 81e8      	LD   R30,Y
0000ce 71e0      	ANDI R30,LOW(0x10)
0000cf f011      	BREQ _0x2000004
0000d0 9adb      	SBI  0x1B,3
0000d1 c001      	RJMP _0x2000005
                 _0x2000004:
0000d2 98db      	CBI  0x1B,3
                 _0x2000005:
0000d3 81e8      	LD   R30,Y
0000d4 72e0      	ANDI R30,LOW(0x20)
0000d5 f011      	BREQ _0x2000006
0000d6 9adc      	SBI  0x1B,4
0000d7 c001      	RJMP _0x2000007
                 _0x2000006:
0000d8 98dc      	CBI  0x1B,4
                 _0x2000007:
0000d9 81e8      	LD   R30,Y
0000da 74e0      	ANDI R30,LOW(0x40)
0000db f011      	BREQ _0x2000008
0000dc 9add      	SBI  0x1B,5
0000dd c001      	RJMP _0x2000009
                 _0x2000008:
0000de 98dd      	CBI  0x1B,5
                 _0x2000009:
0000df 81e8      	LD   R30,Y
0000e0 78e0      	ANDI R30,LOW(0x80)
0000e1 f011      	BREQ _0x200000A
0000e2 9ade      	SBI  0x1B,6
0000e3 c001      	RJMP _0x200000B
                 _0x200000A:
0000e4 98de      	CBI  0x1B,6
                 _0x200000B:
                +
0000e5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e6 958a     +DEC R24
0000e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e8 9ada      	SBI  0x1B,2
                +
0000e9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ea 958a     +DEC R24
0000eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ec 98da      	CBI  0x1B,2
                +
0000ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ee 958a     +DEC R24
0000ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f0 c078      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f1 93aa      	ST   -Y,R26
0000f2 81a8      	LD   R26,Y
0000f3 dfd8      	RCALL __lcd_write_nibble_G100
0000f4 81e8          ld    r30,y
0000f5 95e2          swap  r30
0000f6 83e8          st    y,r30
0000f7 81a8      	LD   R26,Y
0000f8 dfd3      	RCALL __lcd_write_nibble_G100
                +
0000f9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fa 958a     +DEC R24
0000fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000fc c06c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fd 93aa      	ST   -Y,R26
0000fe 81e8      	LD   R30,Y
0000ff e0f0      	LDI  R31,0
000100 50e0      	SUBI R30,LOW(-__base_y_G100)
000101 4ffb      	SBCI R31,HIGH(-__base_y_G100)
000102 81e0      	LD   R30,Z
000103 81a9      	LDD  R26,Y+1
000104 0fae      	ADD  R26,R30
000105 dfeb      	RCALL __lcd_write_data
000106 8049      	LDD  R4,Y+1
000107 80b8      	LDD  R11,Y+0
000108 9622      	ADIW R28,2
000109 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00010a e0a2      	LDI  R26,LOW(2)
00010b 940e 0199 	CALL SUBOPT_0x0
00010d e0ac      	LDI  R26,LOW(12)
00010e dfe2      	RCALL __lcd_write_data
00010f e0a1      	LDI  R26,LOW(1)
000110 940e 0199 	CALL SUBOPT_0x0
000112 e0e0      	LDI  R30,LOW(0)
000113 2ebe      	MOV  R11,R30
000114 2e4e      	MOV  R4,R30
000115 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000116 93aa      	ST   -Y,R26
000117 81a8      	LD   R26,Y
000118 30aa      	CPI  R26,LOW(0xA)
000119 f011      	BREQ _0x2000011
00011a 144a      	CP   R4,R10
00011b f048      	BRLO _0x2000010
                 _0x2000011:
00011c e0e0      	LDI  R30,LOW(0)
00011d 93ea      	ST   -Y,R30
00011e 94b3      	INC  R11
00011f 2dab      	MOV  R26,R11
000120 dfdc      	RCALL _lcd_gotoxy
000121 81a8      	LD   R26,Y
000122 30aa      	CPI  R26,LOW(0xA)
000123 f409      	BRNE _0x2000013
000124 c044      	RJMP _0x20A0001
                 _0x2000013:
                 _0x2000010:
000125 9443      	INC  R4
000126 9ad8      	SBI  0x1B,0
000127 81a8      	LD   R26,Y
000128 dfc8      	RCALL __lcd_write_data
000129 98d8      	CBI  0x1B,0
00012a c03e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00012b 93ba      	ST   -Y,R27
00012c 93aa      	ST   -Y,R26
00012d 931a      	ST   -Y,R17
                 _0x2000014:
00012e 81a9      	LDD  R26,Y+1
00012f 81ba      	LDD  R27,Y+1+1
000130 91ed      	LD   R30,X+
000131 83a9      	STD  Y+1,R26
000132 83ba      	STD  Y+1+1,R27
000133 2f1e      	MOV  R17,R30
000134 30e0      	CPI  R30,0
000135 f019      	BREQ _0x2000016
000136 2fa1      	MOV  R26,R17
000137 dfde      	RCALL _lcd_putchar
000138 cff5      	RJMP _0x2000014
                 _0x2000016:
000139 8118      	LDD  R17,Y+0
00013a 9623      	ADIW R28,3
00013b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013c 93aa      	ST   -Y,R26
00013d 9ad3      	SBI  0x1A,3
00013e 9ad4      	SBI  0x1A,4
00013f 9ad5      	SBI  0x1A,5
000140 9ad6      	SBI  0x1A,6
000141 9ad2      	SBI  0x1A,2
000142 9ad0      	SBI  0x1A,0
000143 9ad1      	SBI  0x1A,1
000144 98da      	CBI  0x1B,2
000145 98d8      	CBI  0x1B,0
000146 98d9      	CBI  0x1B,1
000147 80a8      	LDD  R10,Y+0
000148 81e8      	LD   R30,Y
000149 58e0      	SUBI R30,-LOW(128)
                +
00014a 93e0 0502+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014c 81e8      	LD   R30,Y
00014d 54e0      	SUBI R30,-LOW(192)
                +
00014e 93e0 0503+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000150 e1a4      	LDI  R26,LOW(20)
000151 e0b0      	LDI  R27,0
000152 940e 01a7 	CALL _delay_ms
000154 940e 019f 	CALL SUBOPT_0x1
000156 940e 019f 	CALL SUBOPT_0x1
000158 940e 019f 	CALL SUBOPT_0x1
00015a e2a0      	LDI  R26,LOW(32)
00015b df70      	RCALL __lcd_write_nibble_G100
                +
00015c ec88     +LDI R24 , LOW ( 200 )
00015d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015e 9701     +SBIW R24 , 1
00015f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000160 e2a8      	LDI  R26,LOW(40)
000161 df8f      	RCALL __lcd_write_data
000162 e0a4      	LDI  R26,LOW(4)
000163 df8d      	RCALL __lcd_write_data
000164 e8a5      	LDI  R26,LOW(133)
000165 df8b      	RCALL __lcd_write_data
000166 e0a6      	LDI  R26,LOW(6)
000167 df89      	RCALL __lcd_write_data
000168 dfa1      	RCALL _lcd_clear
                 _0x20A0001:
000169 9621      	ADIW R28,1
00016a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00016b 93ba      	ST   -Y,R27
00016c 93aa      	ST   -Y,R26
00016d 91a9          ld   r26,y+
00016e 91b9          ld   r27,y+
00016f 91e9          ld   r30,y+
000170 91f9          ld   r31,y+
000171 9630          adiw r30,0
000172 f42a          brpl __itoa0
000173 95e0          com  r30
000174 95f0          com  r31
000175 9631          adiw r30,1
000176 e26d          ldi  r22,'-'
000177 936d          st   x+,r22
                 __itoa0:
000178 94e8          clt
000179 e180          ldi  r24,low(10000)
00017a e297          ldi  r25,high(10000)
00017b d00d          rcall __itoa1
00017c ee88          ldi  r24,low(1000)
00017d e093          ldi  r25,high(1000)
00017e d00a          rcall __itoa1
00017f e684          ldi  r24,100
000180 2799          clr  r25
000181 d007          rcall __itoa1
000182 e08a          ldi  r24,10
000183 d005          rcall __itoa1
000184 2f6e          mov  r22,r30
000185 d010          rcall __itoa5
000186 2766          clr  r22
000187 936c          st   x,r22
000188 9508          ret
                 
                 __itoa1:
000189 2766          clr	 r22
                 __itoa2:
00018a 17e8          cp   r30,r24
00018b 07f9          cpc  r31,r25
00018c f020          brlo __itoa3
00018d 9563          inc  r22
00018e 1be8          sub  r30,r24
00018f 0bf9          sbc  r31,r25
000190 f7c9          brne __itoa2
                 __itoa3:
000191 2366          tst  r22
000192 f411          brne __itoa4
000193 f016          brts __itoa5
000194 9508          ret
                 __itoa4:
000195 9468          set
                 __itoa5:
000196 5d60          subi r22,-0x30
000197 936d          st   x+,r22
000198 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000500           	.BYTE 0x4
                 __seed_G101:
000504           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000199 940e 00f1 	CALL __lcd_write_data
00019b e0a3      	LDI  R26,LOW(3)
00019c e0b0      	LDI  R27,0
00019d 940c 01a7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00019f e3a0      	LDI  R26,LOW(48)
0001a0 940e 00cc 	CALL __lcd_write_nibble_G100
                +
0001a2 ec88     +LDI R24 , LOW ( 200 )
0001a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001a7 9610      	adiw r26,0
0001a8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001a9 ed80     +LDI R24 , LOW ( 0x7D0 )
0001aa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001ab 9701     +SBIW R24 , 1
0001ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001ad 95a8      	wdr
0001ae 9711      	sbiw r26,1
0001af f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b0 9508      	ret
                 
                 __ANEGW1:
0001b1 95f1      	NEG  R31
0001b2 95e1      	NEG  R30
0001b3 40f0      	SBCI R31,0
0001b4 9508      	RET
                 
                 __DIVW21U:
0001b5 2400      	CLR  R0
0001b6 2411      	CLR  R1
0001b7 e190      	LDI  R25,16
                 __DIVW21U1:
0001b8 0faa      	LSL  R26
0001b9 1fbb      	ROL  R27
0001ba 1c00      	ROL  R0
0001bb 1c11      	ROL  R1
0001bc 1a0e      	SUB  R0,R30
0001bd 0a1f      	SBC  R1,R31
0001be f418      	BRCC __DIVW21U2
0001bf 0e0e      	ADD  R0,R30
0001c0 1e1f      	ADC  R1,R31
0001c1 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001c2 60a1      	SBR  R26,1
                 __DIVW21U3:
0001c3 959a      	DEC  R25
0001c4 f799      	BRNE __DIVW21U1
0001c5 01fd      	MOVW R30,R26
0001c6 01d0      	MOVW R26,R0
0001c7 9508      	RET
                 
                 __DIVW21:
0001c8 d012      	RCALL __CHKSIGNW
0001c9 dfeb      	RCALL __DIVW21U
0001ca f40e      	BRTC __DIVW211
0001cb dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001cc 9508      	RET
                 
                 __MODW21:
0001cd 94e8      	CLT
0001ce ffb7      	SBRS R27,7
0001cf c004      	RJMP __MODW211
0001d0 95a0      	COM  R26
0001d1 95b0      	COM  R27
0001d2 9611      	ADIW R26,1
0001d3 9468      	SET
                 __MODW211:
0001d4 fdf7      	SBRC R31,7
0001d5 dfdb      	RCALL __ANEGW1
0001d6 dfde      	RCALL __DIVW21U
0001d7 01fd      	MOVW R30,R26
0001d8 f40e      	BRTC __MODW212
0001d9 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001da 9508      	RET
                 
                 __CHKSIGNW:
0001db 94e8      	CLT
0001dc fff7      	SBRS R31,7
0001dd c002      	RJMP __CHKSW1
0001de dfd2      	RCALL __ANEGW1
0001df 9468      	SET
                 __CHKSW1:
0001e0 ffb7      	SBRS R27,7
0001e1 c006      	RJMP __CHKSW2
0001e2 95a0      	COM  R26
0001e3 95b0      	COM  R27
0001e4 9611      	ADIW R26,1
0001e5 f800      	BLD  R0,0
0001e6 9403      	INC  R0
0001e7 fa00      	BST  R0,0
                 __CHKSW2:
0001e8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128L register use summary:
r0 :  13 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   5 r6 :   2 r7 :   1 
r8 :   2 r9 :   0 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  14 r23:   0 
r24:  30 r25:  12 r26:  56 r27:  15 r28:   4 r29:   1 r30:  81 r31:  18 
x  :   7 y  :  43 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega128L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   8 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   1 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  11 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   3 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   7 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   5 jmp   :  37 ld    :  20 ldd   :   7 
ldi   :  60 lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   9 
movw  :  13 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   0 out   :  13 pop   :   0 push  :   0 rcall :  30 
ret   :  14 reti  :   0 rjmp  :  20 rol   :   3 ror   :   0 sbc   :   2 
sbci  :   2 sbi   :  17 sbic  :   0 sbis  :   2 sbiw  :   7 sbr   :   1 
sbrc  :   1 sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  22 std   :   2 sts   :   3 sub   :   2 subi  :   4 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 57 out of 117 (48.7%)

ATmega128L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003d2    940     38    978  131072   0.7%
[.dseg] 0x000100 0x000508      0      8      8    4096   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
