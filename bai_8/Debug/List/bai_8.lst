
AVRASM ver. 2.1.30  E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm Fri Dec 04 10:38:04 2020

E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1094): warning: Register r9 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1095): warning: Register r8 already defined by the .DEF directive
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1096): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128L
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128L
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dem=R4
                 	.DEF _dem_msb=R5
                 	.DEF _vitri=R6
                 	.DEF _vitri_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0089 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 0096      	.DB  0x0,0x0,0x96,0x0
                 
                 _0x2000060:
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1146): warning: .cseg .db misalignment - padding zero byte
000048 0001      	.DB  0x1
                 _0x2000000:
000049 4e2d
00004a 4e41
00004b 4900
00004c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Code\learning\ktmt\thuchanh\bai_8\Debug\List\bai_8.asm(1149): warning: .cseg .db misalignment - padding zero byte
00004d 0000      	.DB  0x0
                 _0x2020003:
00004e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004f 0004      	.DW  0x04
000050 0004      	.DW  0x04
000051 008c      	.DW  __REG_VARS*2
                 
000052 0001      	.DW  0x01
000053 050e      	.DW  __seed_G100
000054 0090      	.DW  _0x2000060*2
                 
000055 0002      	.DW  0x02
000056 0512      	.DW  __base_y_G101
000057 009c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
00005f 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e0a0      	LDI  R26,LOW(__SRAM_START)
00006a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000080 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 00a4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai_8.c
                 ; *
                 ; * Created: 12/4/2020 2:20:30 AM
                 ; * Author: hoangi19
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;
                 ;#define CT1 PINB.2
                 ;#define CT2 PINB.3
                 ;#define servo1 PORTC.7
                 ;
                 ;float goc = 0.0;
                 ;int dem = 0;
                 ;int vitri = 150;
                 ;unsigned char buf[10];
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000089 93ea      	ST   -Y,R30
00008a 93fa      	ST   -Y,R31
00008b b7ef      	IN   R30,SREG
00008c 93ea      	ST   -Y,R30
                 ; 0000 0019 // Reinitialize Timer 0 value
                 ; 0000 001A TCNT0=0xB0;
00008d ebe0      	LDI  R30,LOW(176)
00008e bfe2      	OUT  0x32,R30
                 ; 0000 001B // Place your code here
                 ; 0000 001C dem++;
00008f 01f2      	MOVW R30,R4
000090 9631      	ADIW R30,1
000091 012f      	MOVW R4,R30
                 ; 0000 001D if (dem == 2000) dem = 0;
000092 ede0      	LDI  R30,LOW(2000)
000093 e0f7      	LDI  R31,HIGH(2000)
000094 15e4      	CP   R30,R4
000095 05f5      	CPC  R31,R5
000096 f411      	BRNE _0x3
000097 2444      	CLR  R4
000098 2455      	CLR  R5
                 ; 0000 001E if (dem < vitri) servo1 = 1;
                 _0x3:
                +
000099 1446     +CP R4 , R6
00009a 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
00009b f414      	BRGE _0x4
00009c 9aaf      	SBI  0x15,7
                 ; 0000 001F else servo1 = 0;
00009d c001      	RJMP _0x7
                 _0x4:
00009e 98af      	CBI  0x15,7
                 ; 0000 0020 }
                 _0x7:
00009f 91e9      	LD   R30,Y+
0000a0 bfef      	OUT  SREG,R30
0000a1 91f9      	LD   R31,Y+
0000a2 91e9      	LD   R30,Y+
0000a3 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0026 
                 ; 0000 0027 // Timer/Counter 0 initialization
                 ; 0000 0028 // Clock source: System Clock
                 ; 0000 0029 // Clock value: 8000.000 kHz
                 ; 0000 002A // Mode: Normal top=0xFF
                 ; 0000 002B // OC0 output: Disconnected
                 ; 0000 002C // Timer Period: 0.01 ms
                 ; 0000 002D ASSR=0<<AS0;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bfe0      	OUT  0x30,R30
                 ; 0000 002E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
0000a6 e0e1      	LDI  R30,LOW(1)
0000a7 bfe3      	OUT  0x33,R30
                 ; 0000 002F TCNT0=0xB0;
0000a8 ebe0      	LDI  R30,LOW(176)
0000a9 bfe2      	OUT  0x32,R30
                 ; 0000 0030 OCR0=0x00;
0000aa e0e0      	LDI  R30,LOW(0)
0000ab bfe1      	OUT  0x31,R30
                 ; 0000 0031 
                 ; 0000 0032 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0033 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000ac e0e1      	LDI  R30,LOW(1)
0000ad bfe7      	OUT  0x37,R30
                 ; 0000 0034 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93e0 007d 	STS  125,R30
                 ; 0000 0035 
                 ; 0000 0036 // Global enable interrupts
                 ; 0000 0037 #asm("sei")
0000b1 9478      	sei
                 ; 0000 0038 
                 ; 0000 0039 lcd_init(16);
0000b2 e1a0      	LDI  R26,LOW(16)
0000b3 940e 023a 	CALL _lcd_init
                 ; 0000 003A lcd_clear();
0000b5 940e 0208 	CALL _lcd_clear
                 ; 0000 003B 
                 ; 0000 003C 
                 ; 0000 003D DDRB = 0x00;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bbe7      	OUT  0x17,R30
                 ; 0000 003E PORTB = 0xFF;
0000b9 efef      	LDI  R30,LOW(255)
0000ba bbe8      	OUT  0x18,R30
                 ; 0000 003F 
                 ; 0000 0040 DDRC.7 = 1;
0000bb 9aa7      	SBI  0x14,7
                 ; 0000 0041 
                 ; 0000 0042 DDRD.7 = 1;
0000bc 9a8f      	SBI  0x11,7
                 ; 0000 0043 PORTD.7 = 1;
0000bd 9a97      	SBI  0x12,7
                 ; 0000 0044 
                 ; 0000 0045 //lcd_gotoxy(0,0);
                 ; 0000 0046 //lcd_putsf("0.0");
                 ; 0000 0047 while (1)
                 _0x10:
                 ; 0000 0048     {
                 ; 0000 0049     // Please write your application code here
                 ; 0000 004A         ftoa(goc, 3, buf);
0000be 940e 02be 	CALL SUBOPT_0x0
0000c0 940e 04fd 	CALL __PUTPARD1
0000c2 e0e3      	LDI  R30,LOW(3)
0000c3 93ea      	ST   -Y,R30
0000c4 e0a4      	LDI  R26,LOW(_buf)
0000c5 e0b5      	LDI  R27,HIGH(_buf)
0000c6 940e 00fd 	CALL _ftoa
                 ; 0000 004B         //itoa(dem,buf);
                 ; 0000 004C         lcd_gotoxy(0,0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93ea      	ST   -Y,R30
0000ca e0a0      	LDI  R26,LOW(0)
0000cb 940e 01fb 	CALL _lcd_gotoxy
                 ; 0000 004D         lcd_puts(buf);
0000cd e0a4      	LDI  R26,LOW(_buf)
0000ce e0b5      	LDI  R27,HIGH(_buf)
0000cf 940e 0229 	CALL _lcd_puts
                 ; 0000 004E         if (CT1 == 0)
0000d1 99b2      	SBIC 0x16,2
0000d2 c013      	RJMP _0x13
                 ; 0000 004F         {
                 ; 0000 0050             delay_ms(50);
0000d3 e3a2      	LDI  R26,LOW(50)
0000d4 e0b0      	LDI  R27,0
0000d5 940e 032e 	CALL _delay_ms
                 ; 0000 0051             vitri++;
0000d7 01f3      	MOVW R30,R6
0000d8 9631      	ADIW R30,1
0000d9 940e 02c7 	CALL SUBOPT_0x1
                 ; 0000 0052             goc += 1.8;
0000db 940e 03de 	CALL __ADDF12
0000dd 940e 02ce 	CALL SUBOPT_0x2
                 ; 0000 0053             if (vitri == 200)
0000df ece8      	LDI  R30,LOW(200)
0000e0 e0f0      	LDI  R31,HIGH(200)
0000e1 15e6      	CP   R30,R6
0000e2 05f7      	CPC  R31,R7
0000e3 f411      	BRNE _0x14
                 ; 0000 0054             {
                 ; 0000 0055                 vitri = 150;
0000e4 940e 02d7 	CALL SUBOPT_0x3
                 ; 0000 0056                 goc = 0.0;
                 ; 0000 0057             }
                 ; 0000 0058         }
                 _0x14:
                 ; 0000 0059 
                 ; 0000 005A         if (CT2 == 0)
                 _0x13:
0000e6 99b3      	SBIC 0x16,3
0000e7 c013      	RJMP _0x15
                 ; 0000 005B         {
                 ; 0000 005C             delay_ms(50);
0000e8 e3a2      	LDI  R26,LOW(50)
0000e9 e0b0      	LDI  R27,0
0000ea 940e 032e 	CALL _delay_ms
                 ; 0000 005D             vitri--;
0000ec 01f3      	MOVW R30,R6
0000ed 9731      	SBIW R30,1
0000ee 940e 02c7 	CALL SUBOPT_0x1
                 ; 0000 005E             goc -= 1.8;
0000f0 940e 03d7 	CALL __SUBF12
0000f2 940e 02ce 	CALL SUBOPT_0x2
                 ; 0000 005F             if (vitri == 100)
0000f4 e6e4      	LDI  R30,LOW(100)
0000f5 e0f0      	LDI  R31,HIGH(100)
0000f6 15e6      	CP   R30,R6
0000f7 05f7      	CPC  R31,R7
0000f8 f411      	BRNE _0x16
                 ; 0000 0060             {
                 ; 0000 0061                 vitri = 150;
0000f9 940e 02d7 	CALL SUBOPT_0x3
                 ; 0000 0062                 goc = 0.0;
                 ; 0000 0063             }
                 ; 0000 0064         }
                 _0x16:
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067     }
                 _0x15:
0000fb cfc2      	RJMP _0x10
                 ; 0000 0068 }
                 _0x17:
0000fc cfff      	RJMP _0x17
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
0000fd 93ba      	ST   -Y,R27
0000fe 93aa      	ST   -Y,R26
0000ff 9724      	SBIW R28,4
000100 e0e0      	LDI  R30,LOW(0)
000101 83e8      	ST   Y,R30
000102 83e9      	STD  Y+1,R30
000103 83ea      	STD  Y+2,R30
000104 e3ef      	LDI  R30,LOW(63)
000105 83eb      	STD  Y+3,R30
000106 931a      	ST   -Y,R17
000107 930a      	ST   -Y,R16
000108 85eb      	LDD  R30,Y+11
000109 85fc      	LDD  R31,Y+11+1
00010a 3fef      	CPI  R30,LOW(0xFFFF)
00010b efaf      	LDI  R26,HIGH(0xFFFF)
00010c 07fa      	CPC  R31,R26
00010d f439      	BRNE _0x200000D
00010e 940e 02e4 	CALL SUBOPT_0x4
                +
000110 e9a2     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
000111 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
000112 940e 02b1 	CALL _strcpyf
000114 c0b1      	RJMP _0x20A0004
                 _0x200000D:
000115 3fef      	CPI  R30,LOW(0x7FFF)
000116 e7af      	LDI  R26,HIGH(0x7FFF)
000117 07fa      	CPC  R31,R26
000118 f439      	BRNE _0x200000C
000119 940e 02e4 	CALL SUBOPT_0x4
                +
00011b e9a3     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
00011c e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
00011d 940e 02b1 	CALL _strcpyf
00011f c0a6      	RJMP _0x20A0004
                 _0x200000C:
000120 85ac      	LDD  R26,Y+12
000121 23aa      	TST  R26
000122 f462      	BRPL _0x200000F
                +
000123 85e9     +LDD R30 , Y + 9
000124 85fa     +LDD R31 , Y + 9 + 1
000125 856b     +LDD R22 , Y + 9 + 2
000126 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000127 940e 0338 	CALL __ANEGF1
000129 940e 02e9 	CALL SUBOPT_0x5
00012b 940e 02ee 	CALL SUBOPT_0x6
00012d e2ed      	LDI  R30,LOW(45)
00012e 93ec      	ST   X,R30
                 _0x200000F:
00012f 85a8      	LDD  R26,Y+8
000130 30a7      	CPI  R26,LOW(0x7)
000131 f010      	BRLO _0x2000010
000132 e0e6      	LDI  R30,LOW(6)
000133 87e8      	STD  Y+8,R30
                 _0x2000010:
000134 8518      	LDD  R17,Y+8
                 _0x2000011:
000135 2fe1      	MOV  R30,R17
000136 5011      	SUBI R17,1
000137 30e0      	CPI  R30,0
000138 f039      	BREQ _0x2000013
000139 940e 02f5 	CALL SUBOPT_0x7
00013b 940e 02fa 	CALL SUBOPT_0x8
00013d 940e 0301 	CALL SUBOPT_0x9
00013f cff5      	RJMP _0x2000011
                 _0x2000013:
000140 940e 0306 	CALL SUBOPT_0xA
000142 940e 03de 	CALL __ADDF12
000144 940e 02e9 	CALL SUBOPT_0x5
000146 e010      	LDI  R17,LOW(0)
                +
000147 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000148 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000149 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00014a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00014b 940e 0301 	CALL SUBOPT_0x9
                 _0x2000014:
00014d 940e 0306 	CALL SUBOPT_0xA
00014f 940e 04c1 	CALL __CMPF12
000151 f088      	BRLO _0x2000016
000152 940e 02f5 	CALL SUBOPT_0x7
000154 940e 030f 	CALL SUBOPT_0xB
000156 940e 0301 	CALL SUBOPT_0x9
000158 5f1f      	SUBI R17,-LOW(1)
000159 3217      	CPI  R17,39
00015a f038      	BRLO _0x2000017
00015b 940e 02e4 	CALL SUBOPT_0x4
                +
00015d e9a7     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
00015e e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
00015f 940e 02b1 	CALL _strcpyf
000161 c064      	RJMP _0x20A0004
                 _0x2000017:
000162 cfea      	RJMP _0x2000014
                 _0x2000016:
000163 3010      	CPI  R17,0
000164 f429      	BRNE _0x2000018
000165 940e 02ee 	CALL SUBOPT_0x6
000167 e3e0      	LDI  R30,LOW(48)
000168 93ec      	ST   X,R30
000169 c02f      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
00016a 2fe1      	MOV  R30,R17
00016b 5011      	SUBI R17,1
00016c 30e0      	CPI  R30,0
00016d f159      	BREQ _0x200001C
00016e 940e 02f5 	CALL SUBOPT_0x7
000170 940e 02fa 	CALL SUBOPT_0x8
                +
000172 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000173 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000174 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000175 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000176 940e 03de 	CALL __ADDF12
000178 01df      	MOVW R26,R30
000179 01cb      	MOVW R24,R22
00017a 940e 029a 	CALL _floor
00017c 940e 0301 	CALL SUBOPT_0x9
00017e 940e 0306 	CALL SUBOPT_0xA
000180 940e 047c 	CALL __DIVF21
000182 940e 036b 	CALL __CFD1U
000184 2f0e      	MOV  R16,R30
000185 940e 02ee 	CALL SUBOPT_0x6
000187 2fe0      	MOV  R30,R16
000188 5de0      	SUBI R30,-LOW(48)
000189 93ec      	ST   X,R30
00018a 2fe0      	MOV  R30,R16
00018b e0f0      	LDI  R31,0
00018c 940e 02f5 	CALL SUBOPT_0x7
00018e 940e 04e9 	CALL __CWD1
000190 940e 03a4 	CALL __CDF1
000192 940e 042e 	CALL __MULF12
000194 940e 0316 	CALL SUBOPT_0xC
000196 940e 031b 	CALL SUBOPT_0xD
000198 cfd1      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
000199 85e8      	LDD  R30,Y+8
00019a 30e0      	CPI  R30,0
00019b f131      	BREQ _0x20A0003
00019c 940e 02ee 	CALL SUBOPT_0x6
00019e e2ee      	LDI  R30,LOW(46)
00019f 93ec      	ST   X,R30
                 _0x200001E:
0001a0 85e8      	LDD  R30,Y+8
0001a1 50e1      	SUBI R30,LOW(1)
0001a2 87e8      	STD  Y+8,R30
0001a3 5fef      	SUBI R30,-LOW(1)
0001a4 f0e9      	BREQ _0x2000020
0001a5 940e 0316 	CALL SUBOPT_0xC
0001a7 940e 030f 	CALL SUBOPT_0xB
0001a9 940e 02e9 	CALL SUBOPT_0x5
                +
0001ab 85e9     +LDD R30 , Y + 9
0001ac 85fa     +LDD R31 , Y + 9 + 1
0001ad 856b     +LDD R22 , Y + 9 + 2
0001ae 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0001af 940e 036b 	CALL __CFD1U
0001b1 2f0e      	MOV  R16,R30
0001b2 940e 02ee 	CALL SUBOPT_0x6
0001b4 2fe0      	MOV  R30,R16
0001b5 5de0      	SUBI R30,-LOW(48)
0001b6 93ec      	ST   X,R30
0001b7 2fe0      	MOV  R30,R16
0001b8 e0f0      	LDI  R31,0
0001b9 940e 0316 	CALL SUBOPT_0xC
0001bb 940e 04e9 	CALL __CWD1
0001bd 940e 03a4 	CALL __CDF1
0001bf 940e 031b 	CALL SUBOPT_0xD
0001c1 cfde      	RJMP _0x200001E
                 _0x2000020:
                 _0x20A0003:
0001c2 81ae      	LDD  R26,Y+6
0001c3 81bf      	LDD  R27,Y+6+1
0001c4 e0e0      	LDI  R30,LOW(0)
0001c5 93ec      	ST   X,R30
                 _0x20A0004:
0001c6 8119      	LDD  R17,Y+1
0001c7 8108      	LDD  R16,Y+0
0001c8 962d      	ADIW R28,13
0001c9 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001ca 93aa      	ST   -Y,R26
0001cb 81e8      	LD   R30,Y
0001cc 71e0      	ANDI R30,LOW(0x10)
0001cd f011      	BREQ _0x2020004
0001ce 9adb      	SBI  0x1B,3
0001cf c001      	RJMP _0x2020005
                 _0x2020004:
0001d0 98db      	CBI  0x1B,3
                 _0x2020005:
0001d1 81e8      	LD   R30,Y
0001d2 72e0      	ANDI R30,LOW(0x20)
0001d3 f011      	BREQ _0x2020006
0001d4 9adc      	SBI  0x1B,4
0001d5 c001      	RJMP _0x2020007
                 _0x2020006:
0001d6 98dc      	CBI  0x1B,4
                 _0x2020007:
0001d7 81e8      	LD   R30,Y
0001d8 74e0      	ANDI R30,LOW(0x40)
0001d9 f011      	BREQ _0x2020008
0001da 9add      	SBI  0x1B,5
0001db c001      	RJMP _0x2020009
                 _0x2020008:
0001dc 98dd      	CBI  0x1B,5
                 _0x2020009:
0001dd 81e8      	LD   R30,Y
0001de 78e0      	ANDI R30,LOW(0x80)
0001df f011      	BREQ _0x202000A
0001e0 9ade      	SBI  0x1B,6
0001e1 c001      	RJMP _0x202000B
                 _0x202000A:
0001e2 98de      	CBI  0x1B,6
                 _0x202000B:
                +
0001e3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e4 958a     +DEC R24
0001e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e6 9ada      	SBI  0x1B,2
                +
0001e7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e8 958a     +DEC R24
0001e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ea 98da      	CBI  0x1B,2
                +
0001eb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ec 958a     +DEC R24
0001ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ee c078      	RJMP _0x20A0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ef 93aa      	ST   -Y,R26
0001f0 81a8      	LD   R26,Y
0001f1 dfd8      	RCALL __lcd_write_nibble_G101
0001f2 81e8          ld    r30,y
0001f3 95e2          swap  r30
0001f4 83e8          st    y,r30
0001f5 81a8      	LD   R26,Y
0001f6 dfd3      	RCALL __lcd_write_nibble_G101
                +
0001f7 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001f8 958a     +DEC R24
0001f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001fa c06c      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001fb 93aa      	ST   -Y,R26
0001fc 81e8      	LD   R30,Y
0001fd e0f0      	LDI  R31,0
0001fe 5eee      	SUBI R30,LOW(-__base_y_G101)
0001ff 4ffa      	SBCI R31,HIGH(-__base_y_G101)
000200 81e0      	LD   R30,Z
000201 81a9      	LDD  R26,Y+1
000202 0fae      	ADD  R26,R30
000203 dfeb      	RCALL __lcd_write_data
000204 8099      	LDD  R9,Y+1
000205 8088      	LDD  R8,Y+0
000206 9622      	ADIW R28,2
000207 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000208 e0a2      	LDI  R26,LOW(2)
000209 940e 0320 	CALL SUBOPT_0xE
00020b e0ac      	LDI  R26,LOW(12)
00020c dfe2      	RCALL __lcd_write_data
00020d e0a1      	LDI  R26,LOW(1)
00020e 940e 0320 	CALL SUBOPT_0xE
000210 e0e0      	LDI  R30,LOW(0)
000211 2e8e      	MOV  R8,R30
000212 2e9e      	MOV  R9,R30
000213 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000214 93aa      	ST   -Y,R26
000215 81a8      	LD   R26,Y
000216 30aa      	CPI  R26,LOW(0xA)
000217 f011      	BREQ _0x2020011
000218 149b      	CP   R9,R11
000219 f048      	BRLO _0x2020010
                 _0x2020011:
00021a e0e0      	LDI  R30,LOW(0)
00021b 93ea      	ST   -Y,R30
00021c 9483      	INC  R8
00021d 2da8      	MOV  R26,R8
00021e dfdc      	RCALL _lcd_gotoxy
00021f 81a8      	LD   R26,Y
000220 30aa      	CPI  R26,LOW(0xA)
000221 f409      	BRNE _0x2020013
000222 c044      	RJMP _0x20A0002
                 _0x2020013:
                 _0x2020010:
000223 9493      	INC  R9
000224 9ad8      	SBI  0x1B,0
000225 81a8      	LD   R26,Y
000226 dfc8      	RCALL __lcd_write_data
000227 98d8      	CBI  0x1B,0
000228 c03e      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000229 93ba      	ST   -Y,R27
00022a 93aa      	ST   -Y,R26
00022b 931a      	ST   -Y,R17
                 _0x2020014:
00022c 81a9      	LDD  R26,Y+1
00022d 81ba      	LDD  R27,Y+1+1
00022e 91ed      	LD   R30,X+
00022f 83a9      	STD  Y+1,R26
000230 83ba      	STD  Y+1+1,R27
000231 2f1e      	MOV  R17,R30
000232 30e0      	CPI  R30,0
000233 f019      	BREQ _0x2020016
000234 2fa1      	MOV  R26,R17
000235 dfde      	RCALL _lcd_putchar
000236 cff5      	RJMP _0x2020014
                 _0x2020016:
000237 8118      	LDD  R17,Y+0
000238 9623      	ADIW R28,3
000239 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00023a 93aa      	ST   -Y,R26
00023b 9ad3      	SBI  0x1A,3
00023c 9ad4      	SBI  0x1A,4
00023d 9ad5      	SBI  0x1A,5
00023e 9ad6      	SBI  0x1A,6
00023f 9ad2      	SBI  0x1A,2
000240 9ad0      	SBI  0x1A,0
000241 9ad1      	SBI  0x1A,1
000242 98da      	CBI  0x1B,2
000243 98d8      	CBI  0x1B,0
000244 98d9      	CBI  0x1B,1
000245 80b8      	LDD  R11,Y+0
000246 81e8      	LD   R30,Y
000247 58e0      	SUBI R30,-LOW(128)
                +
000248 93e0 0514+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00024a 81e8      	LD   R30,Y
00024b 54e0      	SUBI R30,-LOW(192)
                +
00024c 93e0 0515+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00024e e1a4      	LDI  R26,LOW(20)
00024f e0b0      	LDI  R27,0
000250 940e 032e 	CALL _delay_ms
000252 940e 0326 	CALL SUBOPT_0xF
000254 940e 0326 	CALL SUBOPT_0xF
000256 940e 0326 	CALL SUBOPT_0xF
000258 e2a0      	LDI  R26,LOW(32)
000259 df70      	RCALL __lcd_write_nibble_G101
                +
00025a ec88     +LDI R24 , LOW ( 200 )
00025b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00025c 9701     +SBIW R24 , 1
00025d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00025e e2a8      	LDI  R26,LOW(40)
00025f df8f      	RCALL __lcd_write_data
000260 e0a4      	LDI  R26,LOW(4)
000261 df8d      	RCALL __lcd_write_data
000262 e8a5      	LDI  R26,LOW(133)
000263 df8b      	RCALL __lcd_write_data
000264 e0a6      	LDI  R26,LOW(6)
000265 df89      	RCALL __lcd_write_data
000266 dfa1      	RCALL _lcd_clear
                 _0x20A0002:
000267 9621      	ADIW R28,1
000268 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000269 940e 0502 	CALL __PUTPARD2
00026b 817b         ldd  r23,y+3
00026c 816a         ldd  r22,y+2
00026d 81f9         ldd  r31,y+1
00026e 81e8         ld   r30,y
00026f fb77         bst  r23,7
000270 0f77         lsl  r23
000271 fd67         sbrc r22,7
000272 6071         sbr  r23,1
000273 2f97         mov  r25,r23
000274 579e         subi r25,0x7e
000275 f081         breq __ftrunc0
000276 f078         brcs __ftrunc0
000277 3198         cpi  r25,24
000278 f490         brsh __ftrunc1
000279 27aa         clr  r26
00027a 27bb         clr  r27
00027b 2788         clr  r24
                 __ftrunc2:
00027c 9408         sec
00027d 9587         ror  r24
00027e 95b7         ror  r27
00027f 95a7         ror  r26
000280 959a         dec  r25
000281 f7d1         brne __ftrunc2
000282 23ea         and  r30,r26
000283 23fb         and  r31,r27
000284 2368         and  r22,r24
000285 c005         rjmp __ftrunc1
                 __ftrunc0:
000286 94e8         clt
000287 2777         clr  r23
000288 27ee         clr  r30
000289 27ff         clr  r31
00028a 2766         clr  r22
                 __ftrunc1:
00028b 776f         cbr  r22,0x80
00028c 9576         lsr  r23
00028d f408         brcc __ftrunc3
00028e 6860         sbr  r22,0x80
                 __ftrunc3:
00028f f977         bld  r23,7
000290 91a9         ld   r26,y+
000291 91b9         ld   r27,y+
000292 9189         ld   r24,y+
000293 9199         ld   r25,y+
000294 17ea         cp   r30,r26
000295 07fb         cpc  r31,r27
000296 0768         cpc  r22,r24
000297 0779         cpc  r23,r25
000298 fb97         bst  r25,7
000299 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00029a 940e 0502 	CALL __PUTPARD2
00029c 940e 04f3 	CALL __GETD2S0
00029e 940e 0269 	CALL _ftrunc
0002a0 940e 04f8 	CALL __PUTD1S0
0002a2 f419          brne __floor1
                 __floor0:
0002a3 940e 04ee 	CALL __GETD1S0
0002a5 c009      	RJMP _0x20A0001
                 __floor1:
0002a6 f7e6          brtc __floor0
0002a7 940e 04ee 	CALL __GETD1S0
                +
0002a9 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0002aa e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0002ab e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0002ac e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0002ad 940e 03d7 	CALL __SUBF12
                 _0x20A0001:
0002af 9624      	ADIW R28,4
0002b0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0002b1 93ba      	ST   -Y,R27
0002b2 93aa      	ST   -Y,R26
0002b3 91e9          ld   r30,y+
0002b4 91f9          ld   r31,y+
0002b5 91a9          ld   r26,y+
0002b6 91b9          ld   r27,y+
0002b7 01cd          movw r24,r26
                 strcpyf0:
0002b8 9005      	lpm  r0,z+
0002b9 920d          st   x+,r0
0002ba 2000          tst  r0
0002bb f7e1          brne strcpyf0
0002bc 01fc          movw r30,r24
0002bd 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _goc:
000500           	.BYTE 0x4
                 _buf:
000504           	.BYTE 0xA
                 __seed_G100:
00050e           	.BYTE 0x4
                 __base_y_G101:
000512           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0002be 91e0 0500 	LDS  R30,_goc
0002c0 91f0 0501 	LDS  R31,_goc+1
0002c2 9160 0502 	LDS  R22,_goc+2
0002c4 9170 0503 	LDS  R23,_goc+3
0002c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0002c7 013f      	MOVW R6,R30
0002c8 dff5      	RCALL SUBOPT_0x0
                +
0002c9 e6a6     +LDI R26 , LOW ( 0x3FE66666 )
0002ca e6b6     +LDI R27 , HIGH ( 0x3FE66666 )
0002cb ee86     +LDI R24 , BYTE3 ( 0x3FE66666 )
0002cc e39f     +LDI R25 , BYTE4 ( 0x3FE66666 )
                 	__GETD2N 0x3FE66666
0002cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002ce 93e0 0500 	STS  _goc,R30
0002d0 93f0 0501 	STS  _goc+1,R31
0002d2 9360 0502 	STS  _goc+2,R22
0002d4 9370 0503 	STS  _goc+3,R23
0002d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0002d7 e9e6      	LDI  R30,LOW(150)
0002d8 e0f0      	LDI  R31,HIGH(150)
0002d9 013f      	MOVW R6,R30
0002da e0e0      	LDI  R30,LOW(0)
0002db 93e0 0500 	STS  _goc,R30
0002dd 93e0 0501 	STS  _goc+1,R30
0002df 93e0 0502 	STS  _goc+2,R30
0002e1 93e0 0503 	STS  _goc+3,R30
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002e4 81ee      	LDD  R30,Y+6
0002e5 81ff      	LDD  R31,Y+6+1
0002e6 93fa      	ST   -Y,R31
0002e7 93ea      	ST   -Y,R30
0002e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
0002e9 87e9     +STD Y + 9 , R30
0002ea 87fa     +STD Y + 9 + 1 , R31
0002eb 876b     +STD Y + 9 + 2 , R22
0002ec 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
0002ee 81ae      	LDD  R26,Y+6
0002ef 81bf      	LDD  R27,Y+6+1
0002f0 9611      	ADIW R26,1
0002f1 83ae      	STD  Y+6,R26
0002f2 83bf      	STD  Y+6+1,R27
0002f3 9711      	SBIW R26,1
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
                +
0002f5 81aa     +LDD R26 , Y + 2
0002f6 81bb     +LDD R27 , Y + 2 + 1
0002f7 818c     +LDD R24 , Y + 2 + 2
0002f8 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0002f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0002fa eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0002fb ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0002fc ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0002fd e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0002fe 940e 042e 	CALL __MULF12
000300 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
                +
000301 83ea     +STD Y + 2 , R30
000302 83fb     +STD Y + 2 + 1 , R31
000303 836c     +STD Y + 2 + 2 , R22
000304 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000305 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
                +
000306 81ea     +LDD R30 , Y + 2
000307 81fb     +LDD R31 , Y + 2 + 1
000308 816c     +LDD R22 , Y + 2 + 2
000309 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00030a 85a9     +LDD R26 , Y + 9
00030b 85ba     +LDD R27 , Y + 9 + 1
00030c 858b     +LDD R24 , Y + 9 + 2
00030d 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00030e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
00030f e0e0     +LDI R30 , LOW ( 0x41200000 )
000310 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000311 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000312 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000313 940e 042e 	CALL __MULF12
000315 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
000316 85a9     +LDD R26 , Y + 9
000317 85ba     +LDD R27 , Y + 9 + 1
000318 858b     +LDD R24 , Y + 9 + 2
000319 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00031a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00031b 940e 0507 	CALL __SWAPD12
00031d 940e 03d7 	CALL __SUBF12
00031f cfc9      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000320 940e 01ef 	CALL __lcd_write_data
000322 e0a3      	LDI  R26,LOW(3)
000323 e0b0      	LDI  R27,0
000324 940c 032e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xF:
000326 e3a0      	LDI  R26,LOW(48)
000327 940e 01ca 	CALL __lcd_write_nibble_G101
                +
000329 ec88     +LDI R24 , LOW ( 200 )
00032a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00032b 9701     +SBIW R24 , 1
00032c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00032d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00032e 9610      	adiw r26,0
00032f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000330 ed80     +LDI R24 , LOW ( 0x7D0 )
000331 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000332 9701     +SBIW R24 , 1
000333 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000334 95a8      	wdr
000335 9711      	sbiw r26,1
000336 f7c9      	brne __delay_ms0
                 __delay_ms1:
000337 9508      	ret
                 
                 __ANEGF1:
000338 9730      	SBIW R30,0
000339 4060      	SBCI R22,0
00033a 4070      	SBCI R23,0
00033b f009      	BREQ __ANEGF10
00033c 5870      	SUBI R23,0x80
                 __ANEGF10:
00033d 9508      	RET
                 
                 __ROUND_REPACK:
00033e 2355      	TST  R21
00033f f442      	BRPL __REPACK
000340 3850      	CPI  R21,0x80
000341 f411      	BRNE __ROUND_REPACK0
000342 ffe0      	SBRS R30,0
000343 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000344 9631      	ADIW R30,1
000345 1f69      	ADC  R22,R25
000346 1f79      	ADC  R23,R25
000347 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000348 e850      	LDI  R21,0x80
000349 2757      	EOR  R21,R23
00034a f411      	BRNE __REPACK0
00034b 935f      	PUSH R21
00034c c0cf      	RJMP __ZERORES
                 __REPACK0:
00034d 3f5f      	CPI  R21,0xFF
00034e f031      	BREQ __REPACK1
00034f 0f66      	LSL  R22
000350 0c00      	LSL  R0
000351 9557      	ROR  R21
000352 9567      	ROR  R22
000353 2f75      	MOV  R23,R21
000354 9508      	RET
                 __REPACK1:
000355 935f      	PUSH R21
000356 2000      	TST  R0
000357 f00a      	BRMI __REPACK2
000358 c0cf      	RJMP __MAXRES
                 __REPACK2:
000359 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00035a e850      	LDI  R21,0x80
00035b 2e19      	MOV  R1,R25
00035c 2215      	AND  R1,R21
00035d 0f88      	LSL  R24
00035e 1f99      	ROL  R25
00035f 2795      	EOR  R25,R21
000360 0f55      	LSL  R21
000361 9587      	ROR  R24
                 
                 __UNPACK1:
000362 e850      	LDI  R21,0x80
000363 2e07      	MOV  R0,R23
000364 2205      	AND  R0,R21
000365 0f66      	LSL  R22
000366 1f77      	ROL  R23
000367 2775      	EOR  R23,R21
000368 0f55      	LSL  R21
000369 9567      	ROR  R22
00036a 9508      	RET
                 
                 __CFD1U:
00036b 9468      	SET
00036c c001      	RJMP __CFD1U0
                 __CFD1:
00036d 94e8      	CLT
                 __CFD1U0:
00036e 935f      	PUSH R21
00036f dff2      	RCALL __UNPACK1
000370 3870      	CPI  R23,0x80
000371 f018      	BRLO __CFD10
000372 3f7f      	CPI  R23,0xFF
000373 f408      	BRCC __CFD10
000374 c0a7      	RJMP __ZERORES
                 __CFD10:
000375 e156      	LDI  R21,22
000376 1b57      	SUB  R21,R23
000377 f4aa      	BRPL __CFD11
000378 9551      	NEG  R21
000379 3058      	CPI  R21,8
00037a f40e      	BRTC __CFD19
00037b 3059      	CPI  R21,9
                 __CFD19:
00037c f030      	BRLO __CFD17
00037d efef      	SER  R30
00037e efff      	SER  R31
00037f ef6f      	SER  R22
000380 e77f      	LDI  R23,0x7F
000381 f977      	BLD  R23,7
000382 c01a      	RJMP __CFD15
                 __CFD17:
000383 2777      	CLR  R23
000384 2355      	TST  R21
000385 f0b9      	BREQ __CFD15
                 __CFD18:
000386 0fee      	LSL  R30
000387 1fff      	ROL  R31
000388 1f66      	ROL  R22
000389 1f77      	ROL  R23
00038a 955a      	DEC  R21
00038b f7d1      	BRNE __CFD18
00038c c010      	RJMP __CFD15
                 __CFD11:
00038d 2777      	CLR  R23
                 __CFD12:
00038e 3058      	CPI  R21,8
00038f f028      	BRLO __CFD13
000390 2fef      	MOV  R30,R31
000391 2ff6      	MOV  R31,R22
000392 2f67      	MOV  R22,R23
000393 5058      	SUBI R21,8
000394 cff9      	RJMP __CFD12
                 __CFD13:
000395 2355      	TST  R21
000396 f031      	BREQ __CFD15
                 __CFD14:
000397 9576      	LSR  R23
000398 9567      	ROR  R22
000399 95f7      	ROR  R31
00039a 95e7      	ROR  R30
00039b 955a      	DEC  R21
00039c f7d1      	BRNE __CFD14
                 __CFD15:
00039d 2000      	TST  R0
00039e f40a      	BRPL __CFD16
00039f d141      	RCALL __ANEGD1
                 __CFD16:
0003a0 915f      	POP  R21
0003a1 9508      	RET
                 
                 __CDF1U:
0003a2 9468      	SET
0003a3 c001      	RJMP __CDF1U0
                 __CDF1:
0003a4 94e8      	CLT
                 __CDF1U0:
0003a5 9730      	SBIW R30,0
0003a6 4060      	SBCI R22,0
0003a7 4070      	SBCI R23,0
0003a8 f0b1      	BREQ __CDF10
0003a9 2400      	CLR  R0
0003aa f026      	BRTS __CDF11
0003ab 2377      	TST  R23
0003ac f412      	BRPL __CDF11
0003ad 9400      	COM  R0
0003ae d132      	RCALL __ANEGD1
                 __CDF11:
0003af 2e17      	MOV  R1,R23
0003b0 e17e      	LDI  R23,30
0003b1 2011      	TST  R1
                 __CDF12:
0003b2 f032      	BRMI __CDF13
0003b3 957a      	DEC  R23
0003b4 0fee      	LSL  R30
0003b5 1fff      	ROL  R31
0003b6 1f66      	ROL  R22
0003b7 1c11      	ROL  R1
0003b8 cff9      	RJMP __CDF12
                 __CDF13:
0003b9 2fef      	MOV  R30,R31
0003ba 2ff6      	MOV  R31,R22
0003bb 2d61      	MOV  R22,R1
0003bc 935f      	PUSH R21
0003bd df8a      	RCALL __REPACK
0003be 915f      	POP  R21
                 __CDF10:
0003bf 9508      	RET
                 
                 __SWAPACC:
0003c0 934f      	PUSH R20
0003c1 01af      	MOVW R20,R30
0003c2 01fd      	MOVW R30,R26
0003c3 01da      	MOVW R26,R20
0003c4 01ab      	MOVW R20,R22
0003c5 01bc      	MOVW R22,R24
0003c6 01ca      	MOVW R24,R20
0003c7 2d40      	MOV  R20,R0
0003c8 2c01      	MOV  R0,R1
0003c9 2e14      	MOV  R1,R20
0003ca 914f      	POP  R20
0003cb 9508      	RET
                 
                 __UADD12:
0003cc 0fea      	ADD  R30,R26
0003cd 1ffb      	ADC  R31,R27
0003ce 1f68      	ADC  R22,R24
0003cf 9508      	RET
                 
                 __NEGMAN1:
0003d0 95e0      	COM  R30
0003d1 95f0      	COM  R31
0003d2 9560      	COM  R22
0003d3 5fef      	SUBI R30,-1
0003d4 4fff      	SBCI R31,-1
0003d5 4f6f      	SBCI R22,-1
0003d6 9508      	RET
                 
                 __SUBF12:
0003d7 935f      	PUSH R21
0003d8 df81      	RCALL __UNPACK
0003d9 3890      	CPI  R25,0x80
0003da f171      	BREQ __ADDF129
0003db e850      	LDI  R21,0x80
0003dc 2615      	EOR  R1,R21
                 
0003dd c004      	RJMP __ADDF120
                 
                 __ADDF12:
0003de 935f      	PUSH R21
0003df df7a      	RCALL __UNPACK
0003e0 3890      	CPI  R25,0x80
0003e1 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003e2 3870      	CPI  R23,0x80
0003e3 f121      	BREQ __ADDF128
                 __ADDF121:
0003e4 2f57      	MOV  R21,R23
0003e5 1b59      	SUB  R21,R25
0003e6 f12b      	BRVS __ADDF1211
0003e7 f412      	BRPL __ADDF122
0003e8 dfd7      	RCALL __SWAPACC
0003e9 cffa      	RJMP __ADDF121
                 __ADDF122:
0003ea 3158      	CPI  R21,24
0003eb f018      	BRLO __ADDF123
0003ec 27aa      	CLR  R26
0003ed 27bb      	CLR  R27
0003ee 2788      	CLR  R24
                 __ADDF123:
0003ef 3058      	CPI  R21,8
0003f0 f028      	BRLO __ADDF124
0003f1 2fab      	MOV  R26,R27
0003f2 2fb8      	MOV  R27,R24
0003f3 2788      	CLR  R24
0003f4 5058      	SUBI R21,8
0003f5 cff9      	RJMP __ADDF123
                 __ADDF124:
0003f6 2355      	TST  R21
0003f7 f029      	BREQ __ADDF126
                 __ADDF125:
0003f8 9586      	LSR  R24
0003f9 95b7      	ROR  R27
0003fa 95a7      	ROR  R26
0003fb 955a      	DEC  R21
0003fc f7d9      	BRNE __ADDF125
                 __ADDF126:
0003fd 2d50      	MOV  R21,R0
0003fe 2551      	EOR  R21,R1
0003ff f072      	BRMI __ADDF127
000400 dfcb      	RCALL __UADD12
000401 f438      	BRCC __ADDF129
000402 9567      	ROR  R22
000403 95f7      	ROR  R31
000404 95e7      	ROR  R30
000405 9573      	INC  R23
000406 f413      	BRVC __ADDF129
000407 c020      	RJMP __MAXRES
                 __ADDF128:
000408 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000409 df3e      	RCALL __REPACK
00040a 915f      	POP  R21
00040b 9508      	RET
                 __ADDF1211:
00040c f7d8      	BRCC __ADDF128
00040d cffb      	RJMP __ADDF129
                 __ADDF127:
00040e 1bea      	SUB  R30,R26
00040f 0bfb      	SBC  R31,R27
000410 0b68      	SBC  R22,R24
000411 f051      	BREQ __ZERORES
000412 f410      	BRCC __ADDF1210
000413 9400      	COM  R0
000414 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000415 2366      	TST  R22
000416 f392      	BRMI __ADDF129
000417 0fee      	LSL  R30
000418 1fff      	ROL  R31
000419 1f66      	ROL  R22
00041a 957a      	DEC  R23
00041b f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00041c 27ee      	CLR  R30
00041d 27ff      	CLR  R31
00041e 2766      	CLR  R22
00041f 2777      	CLR  R23
000420 915f      	POP  R21
000421 9508      	RET
                 
                 __MINRES:
000422 efef      	SER  R30
000423 efff      	SER  R31
000424 e76f      	LDI  R22,0x7F
000425 ef7f      	SER  R23
000426 915f      	POP  R21
000427 9508      	RET
                 
                 __MAXRES:
000428 efef      	SER  R30
000429 efff      	SER  R31
00042a e76f      	LDI  R22,0x7F
00042b e77f      	LDI  R23,0x7F
00042c 915f      	POP  R21
00042d 9508      	RET
                 
                 __MULF12:
00042e 935f      	PUSH R21
00042f df2a      	RCALL __UNPACK
000430 3870      	CPI  R23,0x80
000431 f351      	BREQ __ZERORES
000432 3890      	CPI  R25,0x80
000433 f341      	BREQ __ZERORES
000434 2401      	EOR  R0,R1
000435 9408      	SEC
000436 1f79      	ADC  R23,R25
000437 f423      	BRVC __MULF124
000438 f31c      	BRLT __ZERORES
                 __MULF125:
000439 2000      	TST  R0
00043a f33a      	BRMI __MINRES
00043b cfec      	RJMP __MAXRES
                 __MULF124:
00043c 920f      	PUSH R0
00043d 931f      	PUSH R17
00043e 932f      	PUSH R18
00043f 933f      	PUSH R19
000440 934f      	PUSH R20
000441 2711      	CLR  R17
000442 2722      	CLR  R18
000443 2799      	CLR  R25
000444 9f68      	MUL  R22,R24
000445 01a0      	MOVW R20,R0
000446 9f8f      	MUL  R24,R31
000447 2d30      	MOV  R19,R0
000448 0d41      	ADD  R20,R1
000449 1f59      	ADC  R21,R25
00044a 9f6b      	MUL  R22,R27
00044b 0d30      	ADD  R19,R0
00044c 1d41      	ADC  R20,R1
00044d 1f59      	ADC  R21,R25
00044e 9f8e      	MUL  R24,R30
00044f d027      	RCALL __MULF126
000450 9fbf      	MUL  R27,R31
000451 d025      	RCALL __MULF126
000452 9f6a      	MUL  R22,R26
000453 d023      	RCALL __MULF126
000454 9fbe      	MUL  R27,R30
000455 d01d      	RCALL __MULF127
000456 9faf      	MUL  R26,R31
000457 d01b      	RCALL __MULF127
000458 9fae      	MUL  R26,R30
000459 0d11      	ADD  R17,R1
00045a 1f29      	ADC  R18,R25
00045b 1f39      	ADC  R19,R25
00045c 1f49      	ADC  R20,R25
00045d 1f59      	ADC  R21,R25
00045e 2fe3      	MOV  R30,R19
00045f 2ff4      	MOV  R31,R20
000460 2f65      	MOV  R22,R21
000461 2f52      	MOV  R21,R18
000462 914f      	POP  R20
000463 913f      	POP  R19
000464 912f      	POP  R18
000465 911f      	POP  R17
000466 900f      	POP  R0
000467 2366      	TST  R22
000468 f02a      	BRMI __MULF122
000469 0f55      	LSL  R21
00046a 1fee      	ROL  R30
00046b 1fff      	ROL  R31
00046c 1f66      	ROL  R22
00046d c002      	RJMP __MULF123
                 __MULF122:
00046e 9573      	INC  R23
00046f f24b      	BRVS __MULF125
                 __MULF123:
000470 decd      	RCALL __ROUND_REPACK
000471 915f      	POP  R21
000472 9508      	RET
                 
                 __MULF127:
000473 0d10      	ADD  R17,R0
000474 1d21      	ADC  R18,R1
000475 1f39      	ADC  R19,R25
000476 c002      	RJMP __MULF128
                 __MULF126:
000477 0d20      	ADD  R18,R0
000478 1d31      	ADC  R19,R1
                 __MULF128:
000479 1f49      	ADC  R20,R25
00047a 1f59      	ADC  R21,R25
00047b 9508      	RET
                 
                 __DIVF21:
00047c 935f      	PUSH R21
00047d dedc      	RCALL __UNPACK
00047e 3870      	CPI  R23,0x80
00047f f421      	BRNE __DIVF210
000480 2011      	TST  R1
                 __DIVF211:
000481 f40a      	BRPL __DIVF219
000482 cf9f      	RJMP __MINRES
                 __DIVF219:
000483 cfa4      	RJMP __MAXRES
                 __DIVF210:
000484 3890      	CPI  R25,0x80
000485 f409      	BRNE __DIVF218
                 __DIVF217:
000486 cf95      	RJMP __ZERORES
                 __DIVF218:
000487 2401      	EOR  R0,R1
000488 9408      	SEC
000489 0b97      	SBC  R25,R23
00048a f41b      	BRVC __DIVF216
00048b f3d4      	BRLT __DIVF217
00048c 2000      	TST  R0
00048d cff3      	RJMP __DIVF211
                 __DIVF216:
00048e 2f79      	MOV  R23,R25
00048f 931f      	PUSH R17
000490 932f      	PUSH R18
000491 933f      	PUSH R19
000492 934f      	PUSH R20
000493 2411      	CLR  R1
000494 2711      	CLR  R17
000495 2722      	CLR  R18
000496 2733      	CLR  R19
000497 2744      	CLR  R20
000498 2755      	CLR  R21
000499 e290      	LDI  R25,32
                 __DIVF212:
00049a 17ae      	CP   R26,R30
00049b 07bf      	CPC  R27,R31
00049c 0786      	CPC  R24,R22
00049d 0741      	CPC  R20,R17
00049e f030      	BRLO __DIVF213
00049f 1bae      	SUB  R26,R30
0004a0 0bbf      	SBC  R27,R31
0004a1 0b86      	SBC  R24,R22
0004a2 0b41      	SBC  R20,R17
0004a3 9408      	SEC
0004a4 c001      	RJMP __DIVF214
                 __DIVF213:
0004a5 9488      	CLC
                 __DIVF214:
0004a6 1f55      	ROL  R21
0004a7 1f22      	ROL  R18
0004a8 1f33      	ROL  R19
0004a9 1c11      	ROL  R1
0004aa 1faa      	ROL  R26
0004ab 1fbb      	ROL  R27
0004ac 1f88      	ROL  R24
0004ad 1f44      	ROL  R20
0004ae 959a      	DEC  R25
0004af f751      	BRNE __DIVF212
0004b0 01f9      	MOVW R30,R18
0004b1 2d61      	MOV  R22,R1
0004b2 914f      	POP  R20
0004b3 913f      	POP  R19
0004b4 912f      	POP  R18
0004b5 911f      	POP  R17
0004b6 2366      	TST  R22
0004b7 f032      	BRMI __DIVF215
0004b8 0f55      	LSL  R21
0004b9 1fee      	ROL  R30
0004ba 1fff      	ROL  R31
0004bb 1f66      	ROL  R22
0004bc 957a      	DEC  R23
0004bd f243      	BRVS __DIVF217
                 __DIVF215:
0004be de7f      	RCALL __ROUND_REPACK
0004bf 915f      	POP  R21
0004c0 9508      	RET
                 
                 __CMPF12:
0004c1 2399      	TST  R25
0004c2 f09a      	BRMI __CMPF120
0004c3 2377      	TST  R23
0004c4 f042      	BRMI __CMPF121
0004c5 1797      	CP   R25,R23
0004c6 f048      	BRLO __CMPF122
0004c7 f429      	BRNE __CMPF121
0004c8 17ae      	CP   R26,R30
0004c9 07bf      	CPC  R27,R31
0004ca 0786      	CPC  R24,R22
0004cb f020      	BRLO __CMPF122
0004cc f031      	BREQ __CMPF123
                 __CMPF121:
0004cd 9498      	CLZ
0004ce 9488      	CLC
0004cf 9508      	RET
                 __CMPF122:
0004d0 9498      	CLZ
0004d1 9408      	SEC
0004d2 9508      	RET
                 __CMPF123:
0004d3 9418      	SEZ
0004d4 9488      	CLC
0004d5 9508      	RET
                 __CMPF120:
0004d6 2377      	TST  R23
0004d7 f7c2      	BRPL __CMPF122
0004d8 1797      	CP   R25,R23
0004d9 f398      	BRLO __CMPF121
0004da f7a9      	BRNE __CMPF122
0004db 17ea      	CP   R30,R26
0004dc 07fb      	CPC  R31,R27
0004dd 0768      	CPC  R22,R24
0004de f388      	BRLO __CMPF122
0004df f399      	BREQ __CMPF123
0004e0 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
0004e1 95f0      	COM  R31
0004e2 9560      	COM  R22
0004e3 9570      	COM  R23
0004e4 95e1      	NEG  R30
0004e5 4fff      	SBCI R31,-1
0004e6 4f6f      	SBCI R22,-1
0004e7 4f7f      	SBCI R23,-1
0004e8 9508      	RET
                 
                 __CWD1:
0004e9 2f6f      	MOV  R22,R31
0004ea 0f66      	ADD  R22,R22
0004eb 0b66      	SBC  R22,R22
0004ec 2f76      	MOV  R23,R22
0004ed 9508      	RET
                 
                 __GETD1S0:
0004ee 81e8      	LD   R30,Y
0004ef 81f9      	LDD  R31,Y+1
0004f0 816a      	LDD  R22,Y+2
0004f1 817b      	LDD  R23,Y+3
0004f2 9508      	RET
                 
                 __GETD2S0:
0004f3 81a8      	LD   R26,Y
0004f4 81b9      	LDD  R27,Y+1
0004f5 818a      	LDD  R24,Y+2
0004f6 819b      	LDD  R25,Y+3
0004f7 9508      	RET
                 
                 __PUTD1S0:
0004f8 83e8      	ST   Y,R30
0004f9 83f9      	STD  Y+1,R31
0004fa 836a      	STD  Y+2,R22
0004fb 837b      	STD  Y+3,R23
0004fc 9508      	RET
                 
                 __PUTPARD1:
0004fd 937a      	ST   -Y,R23
0004fe 936a      	ST   -Y,R22
0004ff 93fa      	ST   -Y,R31
000500 93ea      	ST   -Y,R30
000501 9508      	RET
                 
                 __PUTPARD2:
000502 939a      	ST   -Y,R25
000503 938a      	ST   -Y,R24
000504 93ba      	ST   -Y,R27
000505 93aa      	ST   -Y,R26
000506 9508      	RET
                 
                 __SWAPD12:
000507 2e18      	MOV  R1,R24
000508 2f86      	MOV  R24,R22
000509 2d61      	MOV  R22,R1
00050a 2e19      	MOV  R1,R25
00050b 2f97      	MOV  R25,R23
00050c 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00050d 2e1b      	MOV  R1,R27
00050e 2fbf      	MOV  R27,R31
00050f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000510 2e1a      	MOV  R1,R26
000511 2fae      	MOV  R26,R30
000512 2de1      	MOV  R30,R1
000513 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128L register use summary:
r0 :  29 r1 :  30 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   7 r7 :   3 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  25 r18:  12 r19:  12 r20:  22 r21:  63 r22:  73 r23:  68 
r24:  58 r25:  50 r26:  92 r27:  50 r28:   7 r29:   1 r30: 188 r31:  71 
x  :  11 y  : 135 z  :   9 
Registers used: 28 out of 35 (80.0%)

ATmega128L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :  10 and   :   5 andi  :   4 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  27 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  31 brpl  :   8 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 call  :  84 
cbi   :  10 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  11 cpc   :  16 cpi   :  28 cpse  :   0 dec   :  13 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   4 jmp   :  37 ld    :  29 ldd   :  55 
ldi   : 122 lds   :   4 lpm   :   8 lsl   :  12 lsr   :   3 mov   :  52 
movw  :  21 mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   0 out   :  15 pop   :  18 push  :  18 rcall :  34 
ret   :  49 reti  :   1 rjmp  :  51 rol   :  24 ror   :  15 sbc   :   7 
sbci  :  10 sbi   :  17 sbic  :   2 sbis  :   0 sbiw  :  12 sbr   :   2 
sbrc  :   1 sbrs  :   1 sec   :   5 seh   :   0 sei   :   1 sen   :   0 
ser   :   8 ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    :  43 std   :  20 sts   :  12 sub   :   4 subi  :  15 
swap  :   1 tst   :  19 wdr   :   1 
Instructions used: 79 out of 117 (67.5%)

ATmega128L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a28   2562     38   2600  131072   2.0%
[.dseg] 0x000100 0x000516      0     22     22    4096   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
